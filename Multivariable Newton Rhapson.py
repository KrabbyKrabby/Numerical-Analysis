# -*- coding: utf-8 -*-
"""Lab7ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_H88y-ZpGvYSta7TDHOblCu5rcDSf4-U
"""

import numpy as np
import matplotlib.pyplot as plt

from sympy import symbols, diff

# Define the variables
x, y, z = symbols('x y z')

# Define the equations
eq1 = x**2 - 2*x + y**2 - z + 1
eq2 = x*y**2 - x - 3*y + y*z + 2
eq3 = x*z**2 - 3*z + y*z**2 + x*y

# Compute partial derivatives
f11 = diff(eq1, x)
f12 = diff(eq1, y)
f13 = diff(eq1, z)

f21 = diff(eq2, x)
f22 = diff(eq2, y)
f23 = diff(eq2, z)

f31 = diff(eq3, x)
f32 = diff(eq3, y)
f33 = diff(eq3, z)

X = []
F = []
J = []
for i in range(3):
  temp1 = []
  temp2 = []
  temp1.append( float(i+1) )
  X.append(temp1)
  F.append(temp1)
  temp2.append(0.0)
  temp2.append(0.0)
  temp2.append(0.0)
  J.append(temp2)


temp3 = []
temp4 = []

def Multivariable_Newton_Rhapson(X,J,temp1,temp2):
  iter = 1
  while iter <= 50:
    F[0][0] = eq1.subs({x: X[0][0], y: X[1][0], z: X[2][0]})
    F[1][0] = eq2.subs({x: X[0][0], y: X[1][0], z: X[2][0]})
    F[2][0] = eq3.subs({x: X[0][0], y: X[1][0], z: X[2][0]})

    print("Iteration ", iter)
    print("Xi = ",X)
    print("F(Xi)",F)

    J[0][0] = f11.subs({x: X[0][0], y: X[1][0], z: X[2][0]})
    J[0][1] = f12.subs({x: X[0][0], y: X[1][0], z: X[2][0]})
    J[0][2] = f13.subs({x: X[0][0], y: X[1][0], z: X[2][0]})

    J[1][0] = f21.subs({x: X[0][0], y: X[1][0], z: X[2][0]})
    J[1][1] = f22.subs({x: X[0][0], y: X[1][0], z: X[2][0]})
    J[1][2] = f23.subs({x: X[0][0], y: X[1][0], z: X[2][0]})

    J[2][0] = f31.subs({x: X[0][0], y: X[1][0], z: X[2][0]})
    J[2][1] = f32.subs({x: X[0][0], y: X[1][0], z: X[2][0]})
    J[2][2] = f33.subs({x: X[0][0], y: X[1][0], z: X[2][0]})



    J_inv = np.array(J)
    J_inv = np.float64(J_inv)

    J_inv = np.linalg.inv(J_inv)

    T = np.dot( J_inv,F )
    X_new = np.subtract( X,T )
    print("Xi+1", X_new)


    temp3.append(iter)
    TAE = abs( X[0][0]-X_new[0][0] )+abs( X[1][0]-X_new[1][0] )+abs( X[2][0]-X_new[2][0] )
    temp4.append( TAE )
    print("Total Approximation Error",TAE )
    X = X_new

    iter = iter + 1

  p = np.array(temp3)
  q = np.array(temp4)

  plt.plot(p,q)
  plt.xlabel("Iteration")
  plt.ylabel("TAE")
  plt.show()

Multivariable_Newton_Rhapson(X,J,temp1,temp2)