# -*- coding: utf-8 -*-
"""secant_new.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17z1cIFKwpsG9be6WKSIGw3-XqTUZfOX8
"""

import matplotlib.pyplot as plt
import numpy as np

initial_xn = 48.0
initial_xn_1 = 50.0
epsilon = 1e-10

def function_secant(x):
    return x**3 - x - 1

def derivative_secant(x1, x2):
    return (function_secant(x1) - function_secant(x2)) / (x1 - x2)

def function(x):
    return x**3 - x - 1

def derivative(x):
    return 3 * x**2 - 1

def secant_method():
    itr = 1
    x1 = initial_xn
    x2 = initial_xn_1
    temp1 = []
    temp2 = []
    temp3 = []

    while abs(function_secant(x1)) > epsilon:
        xnew = x1 - function_secant(x1) / derivative_secant(x1, x2)
        absolute_error = abs(xnew - x1)
        relative_error = absolute_error / xnew

        print(f"Iteration: {itr}, Xn: {x2}, F(Xn): {function_secant(x2)}, Xn-1: {x1}, F(Xn-1): {function_secant(x1)}, Xn+1: {xnew}, AE: {absolute_error}, RAE: {relative_error}")

        temp1.append(itr)
        temp2.append(absolute_error)
        temp3.append(relative_error)

        itr += 1
        x2 = x1
        x1 = xnew

    return temp1, temp2, temp3

def newton_raphson_method():
    itr = 1
    xold = initial_xn_1
    temp4 = []
    temp5 = []
    temp6 = []

    while abs(function(xold)) > epsilon:
        up = function(xold)
        down = derivative(xold)
        div = up / down
        xnew = xold - div
        absolute_error = abs(xnew - xold)
        relative_error = absolute_error / xnew

        temp4.append(itr)
        temp5.append(absolute_error)
        temp6.append(relative_error)

        itr += 1
        xold = xnew

    return temp4, temp5, temp6

secant_iterations, secant_ae, secant_rae = secant_method()
nr_iterations, nr_ae, nr_rae = newton_raphson_method()

# Plotting AE and RAE for Secant Method
plt.bar(np.arange(len(secant_iterations)) - 0.2, secant_ae, 0.4, label='AE')
plt.bar(np.arange(len(secant_iterations)) + 0.2, secant_rae, 0.4, label='RAE')
plt.xlabel("Iteration")
plt.ylabel("AE/RAE")
plt.legend()
plt.show()

# Plotting AE for both methods
plt.plot(nr_iterations, nr_ae, label='Newton-Raphson')
plt.plot(secant_iterations, secant_ae, '-.', label='Secant')
plt.xlabel("Iteration")
plt.ylabel("AE")
plt.legend()
plt.show()

# Plotting RAE for both methods
plt.plot(nr_iterations, nr_rae, label='Newton-Raphson')
plt.plot(secant_iterations, secant_rae, '-.', label='Secant')
plt.xlabel("Iteration")
plt.ylabel("RAE")
plt.legend()
plt.show()