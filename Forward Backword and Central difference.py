# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mLFwOQpgXabujWx7pX8L_Jsh7aDzE0eW
"""

import numpy as np
import matplotlib.pyplot as plt
from prettytable import PrettyTable

# Define the function f(x) and its derivative f'(x)
def f(x):
    return x**3 + 3*x

def f_prime(x):
    return 3*x**2 + 3

# Input x from the console
x = float(input("Enter the value of x: "))

# Initialize lists to store results
h_values = []
exact_values = []
forward_approximations = []
backward_approximations = []
central_approximations = []
forward_true_errors = []
backward_true_errors = []
central_true_errors = []
forward_relative_true_errors = []
backward_relative_true_errors = []
central_relative_true_errors = []
forward_approximation_errors = []
backward_approximation_errors = []
central_approximation_errors = []
forward_relative_approximation_errors = []
backward_relative_approximation_errors = []
central_relative_approximation_errors = []

# Define the range of h values
h_start = 10.0
h_end = 0.01
h_step = -0.01

# Calculate forward, backward, and central difference approximations
h = h_start
while h >= h_end:
    forward_approx = (f(x + h) - f(x)) / h
    backward_approx = (f(x) - f(x - h)) / h
    central_approx = (f(x + h) - f(x - h)) / (2 * h)

    exact_val = f_prime(x)

    forward_true_error = exact_val - forward_approx
    backward_true_error = exact_val - backward_approx
    central_true_error = exact_val - central_approx

    forward_relative_true_error = abs(forward_true_error / exact_val)
    backward_relative_true_error = abs(backward_true_error / exact_val)
    central_relative_true_error = abs(central_true_error / exact_val)

    forward_approximation_error = exact_val - forward_approx
    backward_approximation_error = exact_val - backward_approx
    central_approximation_error = exact_val - central_approx

    forward_relative_approximation_error = abs(forward_approximation_error / exact_val)
    backward_relative_approximation_error = abs(backward_approximation_error / exact_val)
    central_relative_approximation_error = abs(central_approximation_error / exact_val)

    h_values.append(h)
    exact_values.append(exact_val)
    forward_approximations.append(forward_approx)
    backward_approximations.append(backward_approx)
    central_approximations.append(central_approx)
    forward_true_errors.append(forward_true_error)
    backward_true_errors.append(backward_true_error)
    central_true_errors.append(central_true_error)
    forward_relative_true_errors.append(forward_relative_true_error)
    backward_relative_true_errors.append(backward_relative_true_error)
    central_relative_true_errors.append(central_relative_true_error)
    forward_approximation_errors.append(forward_approximation_error)
    backward_approximation_errors.append(backward_approximation_error)
    central_approximation_errors.append(central_approximation_error)
    forward_relative_approximation_errors.append(forward_relative_approximation_error)
    backward_relative_approximation_errors.append(backward_relative_approximation_error)
    central_relative_approximation_errors.append(central_relative_approximation_error)

    h += h_step

# Create line charts for true errors vs h
plt.figure(figsize=(10, 6))
plt.plot(h_values, forward_true_errors, label='Forward True Error')
plt.plot(h_values, backward_true_errors, label='Backward True Error')
plt.plot(h_values, central_true_errors, label='Central True Error')
plt.xlabel('h')
plt.ylabel("True Error")
plt.legend()
plt.title("True Errors vs h")
plt.grid(True)

# Create line charts for relative true errors vs h
plt.figure(figsize=(10, 6))
plt.plot(h_values, forward_relative_true_errors, label='Forward Relative True Error')
plt.plot(h_values, backward_relative_true_errors, label='Backward Relative True Error')
plt.plot(h_values, central_relative_true_errors, label='Central Relative True Error')
plt.xlabel('h')
plt.ylabel("Relative True Error")
plt.legend()
plt.title("Relative True Errors vs h")
plt.grid(True)

# Create line charts for approximation errors vs h
plt.figure(figsize=(10, 6))
plt.plot(h_values, forward_approximation_errors, label='Forward Approximation Error')
plt.plot(h_values, backward_approximation_errors, label='Backward Approximation Error')
plt.plot(h_values, central_approximation_errors, label='Central Approximation Error')
plt.xlabel('h')
plt.ylabel("Approximation Error")
plt.legend()
plt.title("Approximation Errors vs h")
plt.grid(True)

# Create line charts for relative approximation errors vs h
plt.figure(figsize=(10, 6))
plt.plot(h_values, forward_relative_approximation_errors, label='Forward Relative Approximation Error')
plt.plot(h_values, backward_relative_approximation_errors, label='Backward Relative Approximation Error')
plt.plot(h_values, central_relative_approximation_errors, label='Central Relative Approximation Error')
plt.xlabel('h')
plt.ylabel("Relative Approximation Error")
plt.legend()
plt.title("Relative Approximation Errors vs h")
plt.grid(True)

# Show the plots
plt.show()

# Create and print the table
table = PrettyTable()
table.field_names = ["h", "f'(x)","Forward Approximation Error", "Backward Approximation Error", "Central Approximation Error",]

for i in range(len(h_values)):
    table.add_row([h_values[i], exact_values[i],forward_approximation_errors[i], backward_approximation_errors[i], central_approximation_errors[i]])

print(table)