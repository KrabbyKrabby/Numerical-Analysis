# -*- coding: utf-8 -*-
"""Lab10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11dXHrOGpWO_IqgtPnOMY5ZXDxFm_G_8a
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d

def linear_interpolation(x_values, y_values):
    for i in range(len(x_values)-1):
        x_sub = [x_values[i], x_values[i+1]]
        y_sub = [y_values[i], y_values[i+1]]
        plt.plot(x_sub, y_sub, 'bs--')

def quadratic_interpolation(x_values, y_values):
    def f(x1, y1, x2, y2, x):
        return ((y1 - y2) / (x1 - x2)) * (x - x1) + y1

    def lagrange_basis(i, x_val):
        result = 1
        for j in range(len(x_values)):
            if j != i:
                result *= (x_val - x_values[j]) / (x_values[i] - x_values[j])
        return result

    def quadratic_polynomial(x_val):
        result = 0
        for i in range(len(x_values)):
            result += y_values[i] * lagrange_basis(i, x_val)
        return result

    x_new = np.linspace(min(x_values), max(x_values), 100)
    y_new = quadratic_polynomial(x_new)

    plt.figure(figsize=(10, 6))
    plt.scatter(x_values, y_values, color='red', label='Data Points')
    plt.plot(x_new, y_new, label='Quadratic Interpolation', linestyle='--')
    plt.legend()
    plt.xlabel('x')
    plt.ylabel('f(x)')
    plt.title('Quadratic Interpolation')
    plt.grid(True)
    plt.show()

x_vals = np.array([2, 3, 4, 5, 6, 7])
y_vals = np.array([12, 12, 32, 16, 22, 25])

linear_interpolation(x_vals, y_vals)
quadratic_interpolation(x_vals, y_vals)